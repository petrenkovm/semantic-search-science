import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import streamlit as st
import re
import pandas as pd
import altair as alt
from scripts.search import SemanticSearcher

# üì¶ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
AVAILABLE_MODELS = {
    "MiniLM (–±—ã—Å—Ç—Ä–æ)": "sentence-transformers/all-MiniLM-L6-v2",
    "MPNet (—Ç–æ—á–Ω–æ)": "sentence-transformers/all-mpnet-base-v2",
    "Multilingual": "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
}
INDEX_PATH = "embeddings/faiss_index.index"
DOCS_PATH = "data/cleaned_docs.txt"

# ‚ú® –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
def highlight(text: str, query: str):
    keywords = re.findall(r'\w+', query.lower())
    for kw in keywords:
        text = re.sub(f"(?i)({kw})", r"**\1**", text)
    return text

# üéØ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.set_page_config(page_title="Semantic Search", layout="wide")
    st.title("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞—É—á–Ω—ã–º —Ç–µ–∫—Å—Ç–∞–º")

    # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    if "history" not in st.session_state:
        st.session_state.history = []

    with st.sidebar:
        st.subheader("üïò –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
        for q in reversed(st.session_state.history[-10:]):
            if st.button(q):
                st.session_state.query = q

    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    model_label = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤:", list(AVAILABLE_MODELS.keys()))
    model_name = AVAILABLE_MODELS[model_label]

    # –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", value=st.session_state.get("query", ""))
    top_k = st.slider("–°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å:", min_value=1, max_value=10, value=3)

    if query:
        st.session_state.history.append(query)

        with st.spinner("–ò—â–µ–º..."):
            searcher = SemanticSearcher(model_name=model_name, top_k=top_k)
            results = searcher.search(query)

        st.markdown(f"**–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å:** `{model_name}`")
        st.subheader("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")

        if results:
            max_score = max(score for _, score in results)

            for i, (doc, score) in enumerate(results, 1):
                st.markdown(f"**#{i}** ‚Äî score: `{score:.4f}`")
                st.write(highlight(doc[:500], query) + ("..." if len(doc) > 500 else ""))
                st.progress(round(float(score / max_score), 4))
                st.divider()

            # üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è score
            st.subheader("üìä Score-–≥—Ä–∞—Ñ–∏–∫:")
            df = pd.DataFrame(results, columns=["doc", "score"])
            chart = alt.Chart(df).mark_bar().encode(
                x=alt.X("score:Q", title="Score"),
                y=alt.Y("doc:N", sort="-x", title="–î–æ–∫—É–º–µ–Ω—Ç"),
                tooltip=["score"]
            ).properties(height=300)
            st.altair_chart(chart, use_container_width=True)
        else:
            st.warning("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    main()
